syntax = "proto3";
package v1;

message FieldViewInfo { map<uint64, Shard> shards = 1; }

message Shard {
  uint64 id = 1;
  // Tracks last observed bitdepth for ingested values. Not all fields are
  // tracked so, only BSI fields use this.
  //
  // Upper bounnd is 64.
  map<uint64, uint64> bit_depth = 2;
}

// Entry defines model for storing log entries.
//
// Metadata are never searched, we store them as blobs. We use repeaded field to
// take advantage of dupes, since metadata are similar to labels, they are just
// not indexed.
message Entry {
  bytes stream = 1;
  repeated string labels = 2;
  uint64 timestamp = 3;
  bytes line = 4;
  bytes metadata = 5;

  message StructureMetadata { repeated string labels = 1; }
}

// Sample models metrics sample similar to prometheus. Histogram is an integer
// histogram since we rely on prometheus trnaslation of otel.
message Sample {
  bytes series = 1;
  repeated string labels = 2;
  repeated bytes exemplars = 3;
  bool kind = 4;
  double value = 5;
  bytes histogram = 6;
  int64 timestamp = 7;
}

// Span models tempo spans. When retrieving trace by ID we recostruct the
// response as a  message. To avoid excess work, we store full messages and
// extract searchable properties to fiends. This way, we can return the span as
// it was observed faster.
//
// We are agressive in indexing all indexable attributes. The goal is to have
// maximum performance and speeds, enough to allow cheaper setup/teardown in CI
// environments.
//
// There is  no cost in storing the messages because the underlying storage
// engine uses content addressable storage, data is only stored once.
message Span {
  // Otel resource message
  bytes resource = 1;
  repeated string resource_attributes = 2;
  // Otel scope message
  bytes scope = 3;
  repeated string scope_attributes = 4;
  string scope_name = 5;
  string scope_version = 6;
  // Otel span message
  bytes span = 7;
  repeated string span_attributes = 8;
  string span_name = 9;
  string span_status = 10;
  string span_status_message = 11;
  string span_kind = 12;
  repeated string event_name = 13;
  repeated string event_attributes = 14;
  repeated bytes link_span_id = 15;
  repeated bytes link_trace_id = 16;
  repeated string likn_attributes = 17;

  bytes trace_id = 18;
  bytes span_id = 19;
  string trace_root_name = 20;
  string trace_root_service = 22;
  bytes parent_id = 23;
  int64 span_start_nano = 24;
  int64 span_end_nano = 25;
  int64 trace_start_nano = 26;
  int64 trace_end_nano = 27;
  int64 trace_duration = 28;
  int64 span_duration = 29;
}